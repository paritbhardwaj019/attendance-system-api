generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ModuleType {
  ADMIN
  MANAGER
  LABOUR
  CONTRACTOR
  VISITOR
  PERSON
  PLANT
  MEAL
  EMPLOYEE
}

enum MealStatus {
  PENDING
  APPROVED
  REJECTED
}

model Meal {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mealRequests MealRequest[]
}

model MealRequest {
  id          Int        @id @default(autoincrement())
  mealId      Int
  meal        Meal       @relation(fields: [mealId], references: [id])
  userId      Int
  user        User       @relation("MealRequested", fields: [userId], references: [id])
  quantity    Int        @default(1)
  status      MealStatus @default(PENDING)
  ticketId    String     @unique
  requestTime DateTime   @default(now())
  plantId     Int?
  plant       Plant?     @relation(fields: [plantId], references: [id])
  remarks     String?

  approvedBy   User? @relation("MealApproved", fields: [approvedById], references: [id])
  approvedById Int?

  entries   MealEntry[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model MealEntry {
  id            Int         @id @default(autoincrement())
  mealRequestId Int
  mealRequest   MealRequest @relation(fields: [mealRequestId], references: [id])
  plantId       Int
  plant         Plant       @relation(fields: [plantId], references: [id])
  dateOfMeal    DateTime
  serveTime     DateTime?
  consumeTime   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mealRequestId, dateOfMeal])
}

model SystemCode {
  id          Int        @id @default(autoincrement())
  moduleType  ModuleType
  prefix      String
  lastNumber  Int        @default(0)
  createdBy   User       @relation("SystemCodeCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User       @relation("SystemCodeUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([moduleType])
}

model Role {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  users          User[]
  visitorSignups VisitorSignup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                     Int     @id @default(autoincrement())
  name                   String
  username               String  @unique
  password               String
  encryptedPlainPassword String?

  mobile_number String?
  roleId        Int
  role          Role    @relation(fields: [roleId], references: [id])

  createdVisitors  Visitor[] @relation("VisitorCreated")
  approvedVisitors Visitor[] @relation("VisitorApproved")

  createdContractors Contractor[] @relation("ContractorCreatedBy")
  updatedContractors Contractor[] @relation("ContractorUpdatedBy")
  createdLabours     Labour[]     @relation("LabourCreatedBy")
  updatedLabours     Labour[]     @relation("LabourUpdatedBy")

  plantsHeaded Plant[]       @relation("PlantHead")
  plantMembers PlantMember[]

  admin      Admin?
  manager    Manager?
  contractor Contractor?
  labour     Labour?
  employee   Employee?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestedMeals MealRequest[] @relation("MealRequested")
  approvedMeals  MealRequest[] @relation("MealApproved")

  createdSystemCodes SystemCode[] @relation("SystemCodeCreatedBy")
  updatedSystemCodes SystemCode[] @relation("SystemCodeUpdatedBy")
}

model Employee {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [userId], references: [id])
  userId      Int             @unique
  employeeNo  String          @unique
  email       String?
  department  String?
  designation String?
  plantId     Int?
  plant       Plant?          @relation(fields: [plantId], references: [id])
  photos      EmployeePhoto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeePhoto {
  id         Int      @id @default(autoincrement())
  url        String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [userId], references: [id])
  userId     Int    @unique
  employeeNo String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [userId], references: [id])
  userId     Int    @unique
  employeeNo String @unique

  contractors Contractor[] @relation("ManagerContractors")
}

model Contractor {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  firm_name String?

  employeeNo String   @unique
  manager    Manager? @relation("ManagerContractors", fields: [managerId], references: [id])
  managerId  Int?

  createdBy   User @relation("ContractorCreatedBy", fields: [createdById], references: [id])
  createdById Int

  updatedBy   User @relation("ContractorUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int

  labour        Labour[]
  aadhar_number String            @unique
  photos        ContractorPhoto[]
  pdfs          ContractorPDF[]
  startDate     DateTime?
  endDate       DateTime?
  siteCode      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ContractorPhoto {
  id           Int        @id @default(autoincrement())
  url          String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContractorPDF {
  id           Int        @id @default(autoincrement())
  url          String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  contractorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Labour {
  id               Int         @id @default(autoincrement())
  user             User        @relation(fields: [userId], references: [id])
  userId           Int         @unique
  contractor       Contractor? @relation(fields: [contractorId], references: [id])
  contractorId     Int?
  fingerprint_data String
  aadhar_number    String      @unique

  employeeNo String @unique

  createdBy   User @relation("LabourCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User @relation("LabourUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int

  attendance Attendance[]
  photos     LabourPhoto[]
  pdfs       LabourPDF[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LabourPhoto {
  id       Int    @id @default(autoincrement())
  url      String
  labour   Labour @relation(fields: [labourId], references: [id])
  labourId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LabourPDF {
  id       Int    @id @default(autoincrement())
  url      String
  labour   Labour @relation(fields: [labourId], references: [id])
  labourId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id           Int       @id @default(autoincrement())
  labour       Labour    @relation(fields: [labourId], references: [id])
  labourId     Int
  inTime       DateTime?
  outTime      DateTime?
  workingHours Float
  date         DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([labourId, date], name: "labourId_date")
}

model VisitorSignup {
  id            Int       @id @default(autoincrement())
  name          String
  mobile_number String    @unique @map("mobile_number")
  password      String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int
  visitors      Visitor[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Visitor {
  id           Int           @id @default(autoincrement())
  name         String
  contact      String
  email        String?
  visitPurpose String?
  companyName  String?
  plantId      Int?
  meetingWith  String?
  startDate    DateTime?
  status       VisitorStatus @default(PENDING)
  ticketId     String        @unique
  remarks      String?
  requestTime  DateTime      @default(now())

  plant           Plant?         @relation(fields: [plantId], references: [id])
  visitorSignup   VisitorSignup? @relation(fields: [visitorSignupId], references: [id])
  visitorSignupId Int?
  createdBy       User?          @relation("VisitorCreated", fields: [createdById], references: [id])
  createdById     Int?
  approvedBy      User?          @relation("VisitorApproved", fields: [approvedById], references: [id])
  approvedById    Int?

  photos  VisitorPhoto[]
  entries VisitorEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitorEntry {
  id          Int       @id @default(autoincrement())
  visitorId   Int
  plantId     Int
  dateOfVisit DateTime
  entryTime   DateTime?
  exitTime    DateTime?

  visitor Visitor @relation(fields: [visitorId], references: [id])
  plant   Plant   @relation(fields: [plantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([visitorId, dateOfVisit])
}

model VisitorPhoto {
  id        Int      @id @default(autoincrement())
  url       String
  visitor   Visitor  @relation(fields: [visitorId], references: [id])
  visitorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plant {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  plantHead   String?
  plantHeadId Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mealRequests MealRequest[]
  mealEntries  MealEntry[]

  employees Employee[]

  headUser User?          @relation("PlantHead", fields: [plantHeadId], references: [id])
  members  PlantMember[]
  visitors Visitor[]
  entries  VisitorEntry[]
}

model PlantMember {
  id           Int      @id @default(autoincrement())
  plantId      Int
  userId       Int
  hasAllAccess Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  plant Plant @relation(fields: [plantId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([plantId, userId])
}

enum VisitorStatus {
  PENDING
  APPROVED
  REJECTED
}
